---
title: "Biostat 203B Homework 5"
subtitle: Due Mar 22 @ 11:59PM
author: "Bowen Zhang   UID: 506126821"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
---

## Predicting ICU duration

Using the ICU cohort `mimiciv_icu_cohort.rds` you built in Homework 4, develop **at least three machine learning approaches** (logistic regression with enet regularization, random forest, boosting, SVM, MLP, etc) plus a **model stacking approach** for predicting whether a patient's ICU stay will be longer than 2 days. You should use the `los_long` variable as the outcome. You algorithms can use **patient demographic information** (gender, age at ICU `intime`, marital status, race), **ICU admission information** (first care unit), **the last lab measurements before the ICU stay**, and **first vital measurements during ICU stay** as features. You are welcome to use any feature engineering techniques you think are appropriate; but make sure to not use features that are not available at an ICU stay's `intime`. For instance, `last_careunit` cannot be used in your algorithms. 

1. Data preprocessing and feature engineering.

```{r setup}
#| eval: true

# load libraries
library(tidyverse)
library(tidymodels)
library(gtsummary)
library(ggplot2)
library(xgboost)
library(kernlab)
library(keras)
library(stacks)
```


```{r}
#| eval: true

# load data
mimiciv_icu_cohort <- readRDS("../hw4/mimiciv_shiny/mimic_icu_cohort.rds") |>
  select(subject_id, hadm_id, stay_id, first_careunit, marital_status,
         race, gender, age_intime, Chloride, Glucose, Sodium, Creatinine,
         Bicarbonate, Potassium, WBC, Hematocrit, NBPs, RR, HR, TempF,
         NBPd, los_long) |>
  mutate(gender = as_factor(gender),
         # If marital_status is NA, set it as unknown category
         marital_status = fct_explicit_na(marital_status, na_level = "UNKNOWN"),
         gender = as_factor(gender),
         los_long = as_factor(los_long))

# Get the summary of the dataset
tbl_summary(mimiciv_icu_cohort)
```


2. Partition data into 50% training set and 50% test set. Stratify partitioning according to `los_long`. For grading purpose, sort the data by `subject_id`, `hadm_id`, and `stay_id` and use the seed `203` for the initial data split. Below is the sample code.
```{r}
#| eval: true

set.seed(203)

# sort
mimiciv_icu_cohort <- mimiciv_icu_cohort |>
  arrange(subject_id, hadm_id, stay_id)

data_split <- initial_split(
  mimiciv_icu_cohort, 
  # stratify by los_long
  strata = "los_long", 
  prop = 0.5
  )

all_train_set <- training(data_split) |>
  select(-c(subject_id, hadm_id, stay_id))

test_set <- testing(data_split) |>
  select(-c(subject_id, hadm_id, stay_id))
```

3. Train and tune the models using the training set.

```{r}
#| eval: true

# Recipe
gb_recipe <- 
  recipe(
    los_long ~ ., 
    data = all_train_set
  ) |>
  # median imputation for continuous variables
  step_impute_median(c(Chloride, Glucose, Sodium, Creatinine, Bicarbonate,
                       Potassium, WBC, Hematocrit, NBPs, RR, HR, TempF,
                       NBPd)) |>
  # create traditional dummy variables (necessary for xgboost)
  step_dummy(all_nominal_predictors()) |>
  # zero-variance filter
  step_zv(all_numeric_predictors()) |> 
  # center and scale numeric data
  step_normalize(all_numeric_predictors()) |>
  print()
```

```{r}
#| eval: true

# Model 1 -- XGBoost

set.seed(203)
gb_mod <- 
  boost_tree(
    mode = "classification",
    trees = 600,
    mtry = 9,
    tree_depth = tune(),
    learn_rate = tune()
  ) |> 
  set_engine("xgboost")
gb_mod
```
```{r}
#| eval: true


gb_wf <- workflow() |>
  add_recipe(gb_recipe) |>
  add_model(gb_mod)

# Tune the model
param_grid <- grid_regular(
  tree_depth(range = c(1L, 5L)),
  learn_rate(range = c(-4, 1), trans = log10_trans()),
  levels = c(3, 7)
  )
param_grid
```

```{r, cache = TRUE}
#| eval: true

# Train the model
set.seed(203)

folds <- vfold_cv(all_train_set, v = 5)

gb_fit <- gb_wf |>
  tune_grid(
    resamples = folds,
    grid = param_grid,
    metrics = metric_set(roc_auc, accuracy)
    )

gb_fit |>
  collect_metrics() |>
  print(width = Inf) |>
  filter(.metric == "roc_auc") |>
  ggplot(mapping = aes(x = learn_rate, y = mean, color = factor(tree_depth))) +
  geom_point() +
  labs(x = "Learning Rate", y = "CV AUC") +
  scale_x_log10()

gb_fit |>
  show_best("roc_auc")

best_gb <- gb_fit |>
  select_best("roc_auc")
best_gb
```
According to the result, when `tree_depth = 5`, `learn_rate = 0.0316`, the model has the best performance via 5-fold CV. It has mean AUC of 0.639.


```{r}
#| eval: true

# Model 2 -- SVM

svm_mod <- 
  svm_rbf(
    mode = "classification",
    cost = tune(),
    rbf_sigma = tune()
  ) |> 
  set_engine("kernlab")
svm_mod

```

```{r}
#| eval: true

svm_wf <- workflow() |>
  add_recipe(gb_recipe) |>
  add_model(svm_mod)

# Tune the model
param_grid <- grid_regular(
  cost(range = c(-3, 2)),
  rbf_sigma(range = c(-3, 0)),
  levels = c(3, 3)
  )
param_grid
```

```{r, cache = TRUE}
#| eval: true

set.seed(203)

folds <- vfold_cv(all_train_set, v = 2)

svm_fit <- svm_wf |>
  tune_grid(
    resamples = folds,
    grid = param_grid,
    metrics = metric_set(roc_auc, accuracy)
    )

svm_fit |>
  collect_metrics() |>
  print(width = Inf) |>
  filter(.metric == "roc_auc") |>
  ggplot(mapping = aes(x = cost, y = mean, color = factor(rbf_sigma))) +
  geom_point() +
  labs(x = "Cost", y = "CV AUC") +
  scale_x_log10()

svm_fit |>
  show_best("roc_auc")

best_svm <- svm_fit |>
  select_best("roc_auc")
best_svm

```
According to the result, when `cost = 0.707`, `rbf_sigma` = 0.0316`, the model has the best performance via 2-fold CV. It has mean AUC of 0.620.

```{r}
#| eval: true

# Model 3 -- Logistic Regression

logit_mod <- 
  logistic_reg(
    penalty = tune(), 
    mixture = tune()
  ) |> 
  set_engine("glmnet", standardize = FALSE) |>
  print()
```

```{r}
#| eval: true

logit_wf <- workflow() |>
  add_recipe(gb_recipe) |>
  add_model(logit_mod)

# Tune the model
param_grid <- grid_regular(
  penalty(range = c(-5, 2)), 
  mixture(),
  levels = c(50, 5)
  ) |>
  print()
```

```{r}
#| eval: true

set.seed(203)
folds <- vfold_cv(all_train_set, v = 5)

logit_fit <- logit_wf |>
  tune_grid(
    resamples = folds,
    grid = param_grid,
    metrics = metric_set(roc_auc, accuracy)
    )

logit_fit |>
  # aggregate metrics from K folds
  collect_metrics() |>
  print(width = Inf) |>
  filter(.metric == "roc_auc") |>
  ggplot(mapping = aes(x = penalty, y = mean, color = factor(mixture))) +
  geom_point() +
  labs(x = "Penalty", y = "CV AUC") +
  scale_x_log10()

logit_fit |>
  show_best("roc_auc")

best_logit <- logit_fit |>
  select_best("roc_auc")
best_logit
```
According to the result, when `penalty = 1e-05`, `mixture = 0.25`, the model has the best performance via 5-fold CV. It has mean AUC of 0.603.

```{r, cache = TRUE}
#| eval: true

# Stacking models

set.seed(203)
folds <- vfold_cv(all_train_set, v = 2)

# Logistic
logit_stack_mod <- 
  logistic_reg(
    penalty = tune(), 
    mixture = tune()
  ) |> 
  set_engine("glmnet", standardize = TRUE)

logit_stack_wf <- workflow() |>
  add_recipe(gb_recipe) |>
  add_model(logit_stack_mod)

logit_stack_grid <- grid_regular(
  penalty(range = c(-5, 2)), 
  mixture(),
  levels = c(5, 5)
  )

logit_res <- 
  tune_grid(
    object = logit_stack_wf, 
    resamples = folds, 
    grid = logit_stack_grid,
    control = control_stack_grid()
  )

# SVM
svm_stack_mod <- 
  svm_rbf(
    mode = "classification",
    cost = tune(),
    rbf_sigma = 0.03162278,
  ) |> 
  set_engine("kernlab")

svm_stack_wf <- workflow() |>
  add_recipe(gb_recipe) |>
  add_model(svm_stack_mod)

svm_stack_grid <- grid_regular(
  cost(range = c(-3, 2)),
  levels = c(3)
  )

svm_res <- svm_stack_wf |>
  tune_grid(
    object = svm_stack_wf,
    resamples = folds,
    grid = svm_stack_grid,
    control = control_stack_grid()
    )

# XGBoost
gb_stack_mod <- 
  boost_tree(
    mode = "classification",
    trees = 500,
    mtry = 9,
    tree_depth = tune(),
    learn_rate = tune()
  ) |> 
  set_engine("xgboost")

gb_stack_wf <- workflow() |>
  add_recipe(gb_recipe) |>
  add_model(gb_stack_mod)

gb_stack_grid <- grid_regular(
  tree_depth(range = c(1L, 3L)),
  learn_rate(range = c(-4, 1), trans = log10_trans()),
  levels = c(2, 5)
  )

gb_res <- gb_stack_wf |>
  tune_grid(
    object = gb_stack_wf,
    resamples = folds,
    grid = gb_stack_grid,
    control = control_stack_grid()
    )

# Model stacking
mimic_model_st <- 
  stacks() |>
  # add candidate members
  add_candidates(logit_res) |>
  add_candidates(gb_res) |>
  add_candidates(svm_res) |>
  # determine how to combine their predictions
  blend_predictions(
    penalty = 10^(-3:1),
    metrics = c("roc_auc"),
    times = 3
    ) |>
  # fit the candidates with nonzero stacking coefficients
  fit_members()

mimic_model_st

autoplot(mimic_model_st)

autoplot(mimic_model_st, type = "members")

autoplot(mimic_model_st, type = "weights")
```
The stacking model combines 3 XGBoost models and 2 SVM models. The Boosting model has the highest weight, followed by the SVM model.

4. Compare model classification performance on the test set. Report both the area under ROC curve and accuracy for each machine learning algorithm and the model stacking. Interpret the results. What are the most important features in predicting long ICU stays? How do the models compare in terms of performance and interpretability?

```{r, cache = TRUE}
#| eval: true

# Final workflow for XGBoost
set.seed(203)
final_wf_gb <- gb_wf |>
  finalize_workflow(best_gb)
final_wf_gb

final_fit_gb <- 
  final_wf_gb |>
  last_fit(data_split)

# Test metrics
final_fit_gb |> 
  collect_metrics()
```
The AUC and accuracy of the XGBoost model on the test set are 0.637 and 0.597, respectively.

```{r, cache = TRUE}
#| eval: true

# Final workflow for SVM
final_wf_svm <- svm_wf |>
  finalize_workflow(best_svm)
final_wf_svm

final_fit_svm <- 
  final_wf_svm |>
  last_fit(data_split)

final_fit_svm |> 
  collect_metrics()

```
The AUC and accuracy of the SVM model on the test set are 0.618 and 0.584, respectively.

```{r, cache = TRUE}
#| eval: true

# Final workflow for Logistic Regression
final_wf_logit <- logit_wf |>
  finalize_workflow(best_logit)
final_wf_logit

final_fit_logit <- 
  final_wf_logit |>
  last_fit(data_split)

final_fit_logit |>
  collect_metrics()

```
The AUC and accuracy of the Logistic model on the test set are 0.595 and 0.573, respectively.

```{r, cache = TRUE}
#| eval: true

# Final workflow for Stacking

mimic_pred <- test_set %>%
  bind_cols(predict(mimic_model_st, ., type = "prob")) |>
  mutate(.pred_class = if_else(.pred_TRUE > .pred_FALSE, "TRUE", "FALSE"),
         .pred_class = as.factor(.pred_class))



yardstick::roc_auc(
  mimic_pred,
  truth = los_long,
  contains(".pred_FALSE")
  )

yardstick::accuracy(
  mimic_pred,
  truth = los_long,
  estimate = .pred_class
  )
```
The AUC and accuracy of the stacking model on the test set are 0.636 and 0.596, respectively.

```{r, cache = TRUE}
#| eval: true

# Feature importance for XGBoost
feature_importance_gb <- final_fit_gb %>%
  extract_fit_parsnip() %>%
  pluck("fit") %>%
  vip::vip()

print(feature_importance_gb)
```

```{r, cache = TRUE}
#| eval: true

# Feature importance for Logistic Regression
feature_importance_logit <- final_fit_logit |>
  extract_fit_parsnip() |>
  pluck("fit") |>
  vip::vip()

print(feature_importance_logit)
```

### Conclusion

According to the AUC and accuracy, the XGBoost model has the best performance on the test set. The stacking model has similar performance to the XGBoost model. Logistic model is the worst model among those four models, (but it is much faster than others). The stacking model does not beat the XGBoost model, probably because I did not tune the stacking model too much due to the time limit. The SVM is not suitable for dataset with so many observations such as this one, because the training time is too long.

The most important features in predicting long ICU stays are `HR`, `Hematocrit`, `age_intime`, `TempF`, `WBC`. One interesting thing is that, XGBoost model does not think categorical variables are important. In contrast, logistic model's top 2 variables is `first_care_unit`. Maybe when deploying Elastic Net method, `RR` (included in XGBoost, but excluded in Logistic model) is associated with `first_care_unit`, so it is deleted by Elastic Net.

The Logistic model is the most interpretable model among those models. The stacking model is the least interpretable model. The XGBoost model is also interpretable because it combines many decision trees. Considering that XGBoost has the best performance, and its training time is acceptable, I would recommend using XGBoost model for this dataset.