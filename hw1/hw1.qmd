---
title: "Biostat 203B Homework 1"
subtitle: Due Jan 26, 2024 @ 11:59PM
author: "Bowen Zhang, UID:506126821"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 6
    fig.height: 4
    message: FALSE
---

Display machine information for reproducibility:

```{r}
#| eval: false
sessionInfo()
```

## Q1. Git/GitHub

**No handwritten homework reports are accepted for this course.** We work with Git and GitHub. Efficient and abundant use of Git, e.g., frequent and well-documented commits, is an important criterion for grading your homework.

1.  Apply for the [Student Developer Pack](https://education.github.com/pack) at GitHub using your UCLA email. You'll get GitHub Pro account for free (unlimited public and private repositories).

2.  Create a **private** repository `biostat-203b-2024-winter` and add `Hua-Zhou` and TA team (`Tomoki-Okuno` for Lec 1; `jonathanhori` and `jasenzhang1` for Lec 80) as your collaborators with write permission.

3.  Top directories of the repository should be `hw1`, `hw2`, ... Maintain two branches `main` and `develop`. The `develop` branch will be your main playground, the place where you develop solution (code) to homework problems and write up report. The `main` branch will be your presentation area. Submit your homework files (Quarto file `qmd`, `html` file converted by Quarto, all code and extra data sets to reproduce results) in the `main` branch.

4.  After each homework due date, course reader and instructor will check out your `main` branch for grading. Tag each of your homework submissions with tag names `hw1`, `hw2`, ... Tagging time will be used as your submission time. That means if you tag your `hw1` submission after deadline, penalty points will be deducted for late submission.

5.  After this course, you can make this repository public and use it to demonstrate your skill sets on job market.

**Answer:** I have completed the above steps. I have already applied the Student Developer Pack, and got the GitHub Pro account. The private repository is available at [here](https://github.com/BowenZhang2001/biostat-203b-2024-winter).

## Q2. Data ethics training

This exercise (and later in this course) uses the [MIMIC-IV data v2.2](https://physionet.org/content/mimiciv/2.2/), a freely accessible critical care database developed by the MIT Lab for Computational Physiology. Follow the instructions at <https://mimic.mit.edu/docs/gettingstarted/> to (1) complete the CITI `Data or Specimens Only Research` course and (2) obtain the PhysioNet credential for using the MIMIC-IV data. Display the verification links to your completion report and completion certificate here. **You must complete Q2 before working on the remaining questions.** (Hint: The CITI training takes a few hours and the PhysioNet credentialing takes a couple days; do not leave it to the last minute.)

**Answer:** I complete the CITI training on Jan 13, 2024. The completion report is available at [here](https://www.citiprogram.org/verify/?k5ccb2a03-8510-4a2b-9d96-7cd3fa038445-60483475). The completion certificate is available at [here](https://www.citiprogram.org/verify/?w4e720321-2501-4a63-b789-6ccf173ea4b8-60483475). My PhysioNet account was successfully credentialed on Jan. 17, 2024, 3:37 p.m. I have already signed the agreement and had the access to the MIMIC-IV data.
![Credential](credential.jpg)

## Q3. Linux Shell Commands

1.  Make the MIMIC v2.2 data available at location `~/mimic`.

```{bash}
#| eval: true
ls -l ~/mimic/
```

Refer to the documentation <https://physionet.org/content/mimiciv/2.2/> for details of data files. Please, do **not** put these data files into Git; they are big. Do **not** copy them into your directory. Do **not** decompress the gz data files. These create unnecessary big files and are not big-data-friendly practices. Read from the data folder `~/mimic` directly in following exercises.

**Answer:** I have completed the above steps. I have downloaded the data files to my local machine. The data files are not put into Git, and I have not decompressed the gz data files. The above bash code shows that the files can be read from `~/mimic`.

Use Bash commands to answer following questions.

2.  Display the contents in the folders `hosp` and `icu` using Bash command `ls -l`. Why are these data files distributed as `.csv.gz` files instead of `.csv` (comma separated values) files? Read the page <https://mimic.mit.edu/docs/iv/> to understand what's in each folder.

**Answer: ** `.csv` files are text files that store comma-separated values in a straightforward text format. `.csv.gz` files are CSV files that have been compressed using the gzip algorithm. Gzip compression significantly reduces file size, aiding in storage and reducing bandwidth consumption during transmission. The data files are distributed as `.csv.gz` files instead of `.csv` files because the `.csv.gz` files are compressed, which can save a lot of space.

This is the content of the `hosp` folder:

```{bash}
#| eval: true
ls -l ~/mimic/hosp
```

This is the content of the `icu` folder:

```{bash}
#| eval: true
ls -l ~/mimic/icu/
```

3.  Briefly describe what Bash commands `zcat`, `zless`, `zmore`, and `zgrep` do.

**Answer: ** 

* `zcat` is used to display the contents of a compressed file. The `zcat` command allows you to view the file without decompressing the gzip file, which can save a lot of time.

* `zless` is used to view the contents of a compressed file one screen at a time. If you press `up` or `down` button, it goes to the previous or next line of the file. `zless` is faster than `zmore`.

* `zmore` is used to view the contents of a compressed file one screen at a time. If you press `down` button, it goes to the next page of the file.

* `zgrep` command is to find matching regular expressions in compressed files. The zgrep command saves a lot of time and space by eliminating this step of decompressing the file. 

4.  (Looping in Bash) What's the output of the following bash script?

```{bash}
#| eval: true
for datafile in ~/mimic/hosp/{a,l,pa}*.gz
do
  ls -l $datafile
done
```
**Answer: ** The above command will display the information of the files in the `~/mimic/hosp` folder that start with `a`, `l`, or `pa` and end with `.gz`.

Display the number of lines in each data file using a similar loop. (Hint: combine linux commands `zcat <` and `wc -l`.)

```{bash}
#| eval: false
for datafile in ~/mimic/hosp/{a,l,pa}*.gz
do
  zcat < $datafile | wc -l
done
```
There are 431232 lines in `admissions.csv.gz`, 118171368 lines in `labevents.csv.gz`, and 299713 lines in `patients.csv.gz`.

5.  Display the first few lines of `admissions.csv.gz`. How many rows are in this data file? How many unique patients (identified by `subject_id`) are in this data file? Do they match the number of patients listed in the `patients.csv.gz` file? (Hint: combine Linux commands `zcat <`, `head`/`tail`, `awk`, `sort`, `uniq`, `wc`, and so on.)

```{bash}
#| eval: true

# Display the first few lines of admissions.csv.gz
zcat < ~/mimic/hosp/admissions.csv.gz \
    | head

# Count the number of rows in this data file
zcat < ~/mimic/hosp/admissions.csv.gz \
    | wc -l

# Count the number of unique patients in this data file
zcat < ~/mimic/hosp/admissions.csv.gz \
    | sed '1d' \
    | awk -F, '{print $1}' \
    | sort \
    | uniq \
    | wc -l 
    
# Count the number of patients listed in the patients.csv.gz file
zcat < ~/mimic/hosp/patients.csv.gz \
    | sed '1d' \
    | awk -F, '{print $1}' \
    | sort \
    | uniq \
    | wc -l 
```
**Answer: ** The first few lines of `admissions.csv.gz` are displayed above. There are 431232 rows in this data file (including one row for the name of the variables). There are 180733 unique patients in this data file (excluding the header line). They do not match the number of patients listed in the `patients.csv.gz` file, which is 299712 (excluding the header line).

6.  What are the possible values taken by each of the variable `admission_type`, `admission_location`, `insurance`, and `race`? Also report the count for each unique value of these variables. (Hint: combine Linux commands `zcat`, `head`/`tail`, `awk`, `uniq -c`, `wc`, and so on; skip the header line.)

```{bash}
#| eval: true

# Show possible values taken by the variable admission_type and their counts
zcat < ~/mimic/hosp/admissions.csv.gz \
    | tail -n +2 \
    | awk -F, '{print $6}' \
    | sort \
    | uniq -c
    
# Show the number of possible values taken by the variable admission_type
zcat < ~/mimic/hosp/admissions.csv.gz \
    | tail -n +2 \
    | awk -F, '{print $6}' \
    | sort \
    | uniq \
    | wc -l

```

```{bash}
#| eval: true

# Show possible values taken by admission_location and their counts
zcat < ~/mimic/hosp/admissions.csv.gz \
    | tail -n +2 \
    | awk -F, '{print $8}' \
    | sort \
    | uniq -c
    
# Show the number of possible values taken by admission_location
zcat < ~/mimic/hosp/admissions.csv.gz \
    | tail -n +2 \
    | awk -F, '{print $8}' \
    | sort \
    | uniq \
    | wc -l
```

```{bash}
#| eval: true

# Show possible values taken by insurance and their counts
zcat < ~/mimic/hosp/admissions.csv.gz \
    | tail -n +2 \
    | awk -F, '{print $10}' \
    | sort \
    | uniq -c
    
# Show the number of possible values taken by insurance
zcat < ~/mimic/hosp/admissions.csv.gz \
    | tail -n +2 \
    | awk -F, '{print $10}' \
    | sort \
    | uniq \
    | wc -l
```

```{bash}
#| eval: true

# Show possible values taken by race and their counts
zcat < ~/mimic/hosp/admissions.csv.gz \
    | tail -n +2 \
    | awk -F, '{print $13}' \
    | sort \
    | uniq -c
    
# Show the number of possible values taken by race
zcat < ~/mimic/hosp/admissions.csv.gz \
    | tail -n +2 \
    | awk -F, '{print $13}' \
    | sort \
    | uniq \
    | wc -l
```


7.  *To compress, or not to compress. That's the question.* Let's focus on the big data file `labevents.csv.gz`. Compare compressed gz file size to the uncompressed file size. Compare the run times of `zcat < ~/mimic/labevents.csv.gz | wc -l` versus `wc -l labevents.csv`. Discuss the trade off between storage and speed for big data files. (Hint: `gzip -dk < FILENAME.gz > ./FILENAME`. Remember to delete the large `labevents.csv` file after the exercise.)

```{bash}
#| eval: false

# Uncompress the labevents.csv.gz file
gzip -dk < ~/mimic/hosp/labevents.csv.gz > ./labevents.csv
```

```{bash}
#| eval: false

# Get the size of the labevents.csv.gz file
ls -l ~/mimic/hosp/labevents.csv.gz

# Get the size of the labevents.csv file
ls -l ./labevents.csv
```
Notice that the size of the labevents.csv.gz file is 1.8G, while the size of the labevents.csv file is 12.8G. The size of the labevents.csv.gz file is much smaller than the size of the labevents.csv file.



```{bash}
#| eval: false

# time of running the following cammand
time zcat < ~/mimic/hosp/labevents.csv.gz | wc -l

time wc -l labevents.csv

```
Notice that for labevents.csv.gz, it takes 1 min 23 sec to run the `~/mimic/hosp/labevents.csv.gz | wc -l` command, while for the decompressed file labevents.csv, it only takes 15 sec to run the `wc -l labevents.csv` command. Compressed files save disk space, which is beneficial when dealing with large datasets. However, if we read from a compressed file (zcat), the decompression step will introduce additional processing time comparing to directly reading csv files.

```{bash}
#| eval: false

# Delete the csv file
rm ./labevents.csv
```



## Q4. Who's popular in Price and Prejudice

1.  You and your friend just have finished reading *Pride and Prejudice* by Jane Austen. Among the four main characters in the book, Elizabeth, Jane, Lydia, and Darcy, your friend thinks that Darcy was the most mentioned. You, however, are certain it was Elizabeth. Obtain the full text of the novel from <http://www.gutenberg.org/cache/epub/42671/pg42671.txt> and save to your local folder.

```{bash}
#| eval: false
wget -nc http://www.gutenberg.org/cache/epub/42671/pg42671.txt
```

Explain what `wget -nc` does. Do **not** put this text file `pg42671.txt` in Git.

**Answer: ** `wget -nc` is used to download files from the internet. `-nc` means "no clobber", which means that existing files will not be overwritten. The file has been downloaded to my local folder, and it is not put into Git.

Complete the following loop to tabulate the number of times each of the four characters is mentioned using Linux commands.

```{bash}
#| eval: false
wget -nc http://www.gutenberg.org/cache/epub/42671/pg42671.txt
for char in Elizabeth Jane Lydia Darcy
do
  echo $char:
  # some bash commands here
  grep -o -i "$char" pg42671.txt | wc -w
done
```
**Answer: ** The above code shows the number of times each of the four characters is mentioned. Elizabeth is mentioned 634 times, Jane is mentioned 293 times, Lydia is mentioned 171 times, and Darcy is mentioned 418 times.



2.  What's the difference between the following two commands?

```{bash}
#| eval: false
echo 'hello, world' > test1.txt
```

and

```{bash}
#| eval: false
echo 'hello, world' >> test2.txt
```

**Answer: ** The first command will create a new file named `test1.txt` and write `hello, world` to it. If the file already exists, it will be overwritten with the new content. The second command will create a new file named `test2.txt` and write `hello, world` to it. If the file already exists, it will be appended to the end of the file.


3.  Using your favorite text editor (e.g., `vi`), type the following and save the file as `middle.sh`:

```{bash eval=FALSE}
#!/bin/sh
# Select lines from the middle of a file.
# Usage: bash middle.sh filename end_line num_lines
head -n "$2" "$1" | tail -n "$3"
```

Using `chmod` to make the file executable by the owner, and run

```{bash}
#| eval: true
chmod u+x middle.sh
./middle.sh pg42671.txt 20 5
```
Explain the output. Explain the meaning of `"$1"`, `"$2"`, and `"$3"` in this shell script. Why do we need the first line of the shell script?

**Answer: ** This command will display the last 5 lines of the first 20 lines of the file pg42671.txt. `"$1"`, `"$2"`, `"$3"` are the first, second, and third argument passed to `middle.sh` when it is executed. `"$1"` would be replaced with `pg42671.txt`, which is the filename. `"$2"` would be replaced with 20, which represents the end line from where to start selecting lines. `"$3"`would be replaced with 5, which represents the number of lines to select from the middle. We need the first line of the shell script because it tells the system that this is a shell script and it should be executed by the shell.

## Q5. More fun with Linux

Try following commands in Bash and interpret the results: `cal`, `cal 2024`, `cal 9 1752` (anything unusual?), `date`, `hostname`, `arch`, `uname -a`, `uptime`, `who am i`, `who`, `w`, `id`, `last | head`, `echo {con,pre}{sent,fer}{s,ed}`, `time sleep 5`, `history | tail`.

**Answer: **

```{bash}
#| eval: true
cal
```
`cal` is used to display a calendar of the current month.

```{bash}
#| eval: true

cal 2024
```
`cal 2024` is used to display a calendar of the year 2024.

```{bash}
#| eval: true

cal 9 1752
```
`cal 9 1752` is to display a calendar of September, 1752. The calendar is missing 11 days. This is because the British Empire adopted the Gregorian calendar on September 14, 1752, which meant that the day after September 2, 1752 was September 14, 1752.

```{bash}
#| eval: true

date
```
`date` is used to display the current date and time.

```{bash} 
#| eval: true

hostname
```
`hostname` is used to display the name of the current host system.

```{bash}
#| eval: true

arch
```
`arch` is used to display the machine architecture.

```{bash}
#| eval: true

uname -a
```
`uname -a` is used to display all system information.

```{bash}
#| eval: true

uptime
```
`uptime` is used to check how long the system has been running and to display system load averages. The first output is the current time. The second output is how long the system has been running. The third output is the number of users currently logged on. The fourth output is the system load averages for the past 1, 5, and 15 minutes.

```{bash}
#| eval: true

whoami
```
`whoami` is used to display the current user name. in Windows Subsystem for Linux, `who am i` does not work.

```{bash}
#| eval: true

who
```
`who` is used to display the users who are currently logged in.

```{bash}
#| eval: true

w
```
`w` is used to display the information about the users currently on the machine, and their processes.

```{bash}
#| eval: true

id
```
`id` is used to display the user and group IDs of the current user.

```{bash}
#| eval: true

last | head
```
`last | head` is used to display the last 10 logins.

```{bash}
#| eval: true

echo {con,pre}{sent,fer}{s,ed}
```
`echo {con,pre}{sent,fer}{s,ed}` is used to display the following words: consents, consented, consfers, consfered, presents, presented, presfers, presfered. It is an example of Brace Expansion. It can generate multiple strings based on specified patterns. The first part is from `{con,pre}`, the second part is from `{sent,fer}`, and the third part is from `{s,ed}`, so it has 8 combinations in total.

```{bash}
#| eval: true

time sleep 5
```
`time sleep 5` is used to display the time it takes to run the command `sleep 5`. The output is `real 0m5.003s`, which means that it takes 5.003 seconds to run the command `sleep 5`. `time` command is to record the time it takes to run a command. `sleep` command is to delay the execution of the next command for a specified amount of time.

```{bash}
#| eval: true

history | tail
```

`history | tail` is used to display the last 10 commands that have been executed. This command does not work on Rstudio server. It might because Rstudio does not have the access. However, it works on wsl. The following is the snapshot of the output.
![history](history.jpg)

## Q6. Book

1.  Git clone the repository <https://github.com/christophergandrud/Rep-Res-Book> for the book *Reproducible Research with R and RStudio* to your local machine.

2.  Open the project by clicking `rep-res-3rd-edition.Rproj` and compile the book by clicking `Build Book` in the `Build` panel of RStudio. (Hint: I was able to build `git_book` and `epub_book` but not `pdf_book`.)

The point of this exercise is (1) to get the book for free and (2) to see an example how a complicated project such as a book can be organized in a reproducible way.

For grading purpose, include a screenshot of Section 4.1.5 of the book here.

**Answer: ** I have completed the above steps. The screenshot of Section 4.1.5 of the book is shown below.
![book](book.jpg)


