---
title: "Biostat 203B Homework 4"
subtitle: "Due Mar 8 @ 11:59PM"
author: "Bowen Zhang   ID:506126821"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
execute:
  eval: false
---

Display machine information:
```{r}
#| eval: true

sessionInfo()
```
Display my machine memory.
```{r}
#| eval: true

memuse::Sys.meminfo()
```

Load database libraries and the tidyverse frontend:
```{r setup}
#| eval: true

library(bigrquery)
library(dbplyr)
library(DBI)
library(gt)
library(gtsummary)
library(tidyverse)
```

## Q1. Compile the ICU cohort in HW3 from the Google BigQuery database 

Below is an outline of steps. In this homework, we exclusively work with the BigQuery database and should not use any MIMIC data files stored on our local computer. Transform data as much as possible in BigQuery database and `collect()` the tibble only at the end of Q1.7.

### Q1.1 Connect to BigQuery

Authenticate with BigQuery using the service account token. Please place the service account token (shared via BruinLearn) in the working directory (same folder as your qmd file). Do **not** add this token to your git repository.
```{r}
#| eval: true

# path to the service account token 
satoken <- "biostat-203b-2024-winter-313290ce47a6.json"
# BigQuery authentication using service account
bq_auth(path = satoken)
```
Connect to BigQuery database `mimic4_v2_2` in GCP (Google Cloud Platform), using the project billing account `biostat-203b-2024-winter`.
```{r}
#| eval: true

# connect to the BigQuery database `biostat-203b-2024-winter.mimic4_v2_2`
con_bq <- dbConnect(
    bigrquery::bigquery(),
    project = "biostat-203b-2024-winter",
    dataset = "mimic4_v2_2",
    billing = "biostat-203b-2024-winter"
)
con_bq
```
List all tables in the `mimic4_v2_2` database.
```{r}
#| eval: true

dbListTables(con_bq)
```
### Q1.2 `icustays` data

Connect to the `icustays` table.
```{r}
#| eval: true

# full ICU stays table
icustays_tble <- tbl(con_bq, "icustays") |>
  # show_query() |>
  print(width = Inf)
```

### Q1.3 `admissions` data

Connect to the `admissions` table.
```{r}
#| eval: true

# TODO
admissions_tble <- tbl(con_bq, "admissions") |>
  print(width = Inf)
```

### Q1.4 `patients` data

Connect to the `patients` table.
```{r}
#| eval: true
# TODO
patients_tble <- tbl(con_bq, "patients") |>
  print(width = Inf)
```

### Q1.5 `labevents` data

Connect to the `labevents` table and retrieve a subset that only contain subjects who appear in `icustays_tble` and the lab items listed in HW3. Only keep the last lab measurements before the ICU stay and pivot lab items to become variables/columns. Write all steps in _one_ chain of pipes.
```{r}
#| eval: true

# TODO
labevents_tble <- tbl(con_bq, "labevents") |>
  select(subject_id, itemid, storetime, valuenum) |>
  filter(itemid %in% c(50912, 50971, 50983, 50902,
                       50882, 51221, 51301, 50931)) |>
  semi_join(icustays_tble, by = "subject_id") |>
  left_join(
    icustays_tble |>
      select(subject_id, stay_id, intime),
    by = "subject_id"
    ) |>
  filter(storetime < intime) |>
  group_by(stay_id, itemid) |>
  slice_max(order_by = storetime, with_ties = FALSE) |>
  ungroup() |>
  select(-c(storetime, intime)) |>
  # compute() |>
  pivot_wider(names_from = itemid, values_from = valuenum) |>
  arrange(subject_id) |>
  rename(
    Creatinine = `50912`,
    Potassium = `50971`,
    Sodium = `50983`,
    Chloride = `50902`,
    Bicarbonate = `50882`,
    Hematocrit = `51221`,
    WBC = `51301`,
    Glucose = `50931`)

print(labevents_tble, width = Inf)
```

### Q1.6 `chartevents` data

Connect to `chartevents` table and retrieve a subset that only contain subjects who appear in `icustays_tble` and the chart events listed in HW3. Only keep the first chart events during ICU stay and pivot chart events to become variables/columns. Write all steps in _one_ chain of pipes.
```{r}
#| eval: true

# TODO
chartevents_tble <- tbl(con_bq, "chartevents") |>
  select(subject_id, itemid, charttime, valuenum) |>
  filter(itemid %in% c(220045, 220179, 220180, 223761, 220210)) |>
  left_join(
    icustays_tble |>
      select(subject_id, stay_id, intime, outtime),
    by = "subject_id"
    ) |>
  filter(charttime >= intime & charttime <= outtime) |>
  group_by(stay_id, itemid) |>
  slice_min(order_by = charttime, with_ties = FALSE) |>
  ungroup() |>
  select(-c(charttime, intime, outtime)) |>
  pivot_wider(names_from = itemid, values_from = valuenum) |>
  arrange(subject_id) |>
  rename(
    HR = `220045`,
    NBPs = `220179`,
    NBPd = `220180`,
    RR = `223761`,
    TempF = `220210`)

print(chartevents_tble, width = Inf)
```

### Q1.7 Put things together

This step is similar to Q7 of HW3. Using _one_ chain of pipes `|>` to perform following data wrangling steps: (i) start with the `icustays_tble`, (ii) merge in admissions and patients tables, (iii) keep adults only (age at ICU intime >= 18), (iv) merge in the labevents and chartevents tables, (v) `collect` the tibble.

```{r}
#| eval: true

# TODO
mimic_icu_cohort <- icustays_tble |>
  left_join(admissions_tble, by = c("subject_id", "hadm_id")) |>
  left_join(patients_tble, by = "subject_id") |>
  mutate(age_intime = anchor_age + as.numeric(year(intime)) - anchor_year) |>
  filter(age_intime >= 18) |>
  left_join(labevents_tble, by = c("subject_id", "stay_id")) |>
  left_join(chartevents_tble, by = c("subject_id", "stay_id")) |>
  arrange(subject_id) |>
  collect()

print(mimic_icu_cohort, width = Inf)
```

### Q1.8 Preprocessing

Perform the following preprocessing steps. (i) Lump infrequent levels into "Other" level for `first_careunit`, `last_careunit`, `admission_type`, `admission_location`, and `discharge_location`. (ii) Collapse the levels of `race` into `ASIAN`, `BLACK`, `HISPANIC`, `WHITE`, and `Other`. (iii) Create a new variable `los_long` that is `TRUE` when `los` is greater than or equal to 2 days. (iv) Summarize the data using `tbl_summary()`, stratified by `los_long`. Hint: `fct_lump` and `fct_collapse` from the `forcats` package can be useful.

Hint: Below is a numerical summary of my tibble after preprocessing:

<iframe width=95% height="500" src="./mimic_icu_cohort_gtsummary.html"></iframe>

```{r}
#| eval: true

mimic_icu_cohort <- mimic_icu_cohort |>
  mutate(
    first_careunit = fct_lump(first_careunit, n = 4),
    last_careunit = fct_lump(last_careunit, n = 4),
    admission_type = fct_lump(admission_type, n = 4),
    admission_location = fct_lump(admission_location, n = 3),
    discharge_location = fct_lump(discharge_location, n = 4),
    race = fct_collapse(race,
                        ASIAN = str_subset(race, "ASIAN"),
                        WHITE = str_subset(race, "WHITE"),
                        BLACK = str_subset(race, "BLACK"),
                        HISPANIC = str_subset(race, "HISPANIC"),
                        Other = str_subset(mimic_icu_cohort$race, 
                                           "ASIAN|WHITE|BLACK|HISPANIC",
                                           negate = TRUE)),
    los_long = los >= 2)

mimic_icu_cohort |> 
  select(-c(subject_id, hadm_id, stay_id, intime, outtime, admittime,
            dischtime, deathtime, admit_provider_id, edregtime,
            edouttime, anchor_age, anchor_year, anchor_year_group)) |>
  tbl_summary(by = los_long)
```


### Q1.9 Save the final tibble

Save the final tibble to an R data file `mimic_icu_cohort.rds` in the `mimiciv_shiny` folder.
```{r}
#| eval: true

# make a directory mimiciv_shiny
if (!dir.exists("mimiciv_shiny")) {
  dir.create("mimiciv_shiny")
}
# save the final tibble
mimic_icu_cohort |>
  write_rds("mimiciv_shiny/mimic_icu_cohort.rds", compress = "gz")
```
Close database connection and clear workspace.
```{r}
#| eval: true

if (exists("con_bq")) {
  dbDisconnect(con_bq)
}
rm(list = ls())
```
Although it is not a good practice to add big data files to git, for grading purpose, please add `mimic_icu_cohort.rds` to your git repository.

## Q2. Shiny app

Develop a Shiny app for exploring the ICU cohort data created in Q1. The app should **reside in the `mimiciv_shiny` folder**. The app should contains at least **two tabs**. One tab provides easy access to the **graphical and numerical summaries** of variables (demographics, lab measurements, vitals) in the ICU cohort. The other allows user to choose a specific patient in the cohort and display the patient's ADT and ICU stay information as we did in Q1 of HW3.
