---
title: "Biostat 203B Homework 3"
subtitle: "Due Feb 23 @ 11:59PM"
author: "Bowen Zhang  UID: 506126821"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
execute:
  eval: false    
---

Display machine information for reproducibility:

```{r}
#|eval: True

sessionInfo()
```

Load necessary libraries (you can add more as needed).

```{r setup}
#| eval: true

library(arrow)
library(memuse)
library(pryr)
library(R.utils)
library(tidyverse)
```

Display your machine memory.

```{r}
memuse::Sys.meminfo()
```

In this exercise, we use tidyverse (ggplot2, dplyr, etc) to explore the [MIMIC-IV](https://mimic.mit.edu/docs/iv/) data introduced in [homework 1](https://ucla-biostat-203b.github.io/2024winter/hw/hw1/hw1.html) and to build a cohort of ICU stays.

## Q1. Visualizing patient trajectory

Visualizing a patient's encounters in a health care system is a common task in clinical data analysis. In this question, we will visualize a patient's ADT (admission-discharge-transfer) history and ICU vitals in the MIMIC-IV data.

### Q1.1 ADT history

A patient's ADT history records the time of admission, discharge, and transfer in the hospital. This figure shows the ADT history of the patient with `subject_id` 10001217 in the MIMIC-IV data. The x-axis is the calendar time, and the y-axis is the type of event (ADT, lab, procedure). The color of the line segment represents the care unit. The size of the line segment represents whether the care unit is an ICU/CCU. The crosses represent lab events, and the shape of the dots represents the type of procedure. The title of the figure shows the patient's demographic information and the subtitle shows top 3 diagnoses.

![](10001217_adt.png) Do a similar visualization for the patient with `subject_id` 10013310 using ggplot.

Hint: We need to pull information from data files `patients.csv.gz`, `admissions.csv.gz`, `transfers.csv.gz`, `labevents.csv.gz`, `procedures_icd.csv.gz`, `diagnoses_icd.csv.gz`, `d_icd_procedures.csv.gz`, and `d_icd_diagnoses.csv.gz`. For the big file `labevents.csv.gz`, use the Parquet format you generated in Homework 2. For reproducibility, make the Parquet folder `labevents_pq` available at the current working directory `hw3`, for example, by a symbolic link. Make your code reproducible.

**Answer:**

```{bash}
#| eval: false
#| echo: false

# This bash code is to explore the structure of the datasets
# Remove the '##' when you want to have a look at certain dataset

### Title of the figure -- patients.csv.gz ###
# We need to use subject_id, gender, anchor_age, race
# BUT we do NOT have race.
## zcat < ~/mimic/hosp/patients.csv.gz | head


### Title(race) -- admissions.csv.gz ###
# We need subject_id, race
## zcat < ~/mimic/hosp/admissions.csv.gz | head


### Subtitle of the figure -- diagnoses_icd.csv.gz ###
# We need to use subject_id, hadm_id, seq_num, icd_code, icd_version
# seq_num is the priority assigned to the diagnoses, we need TOP 3
# icd_code has two versions, 9 and 10 stored in icd_version
# We shold match the icd_code to diagnoses.csv.gz to get the description
## zcat < ~/mimic/hosp/diagnoses_icd.csv.gz | head


### Subtitle of the figure -- d_icd_diagnoses.csv.gz ###
# We need to match the coding with actual name of diagnoses
## zcat < ~/mimic/hosp/d_icd_diagnoses.csv.gz | head


### Procedure -- procedures_icd.csv.gz ###
# icd_code has two versions, 9 and 10 stored in icd_version
# We shold match the icd_code to d_icd_procedures.csv.gz to get the description
## zcat < ~/mimic/hosp/procedures_icd.csv.gz | head


### Procedure -- d_icd_procedures.csv.gz ###
# We need to match the coding with actual name of procedures
## zcat < ~/mimic/hosp/d_icd_procedures.csv.gz | head


### ADT -- transfers.csv.gz ###
# We need subject_id, hadm_id, eventtype, careunit, intime, outtime
## zcat < ~/mimic/hosp/transfers.csv.gz | head
```

```{bash}
#| eval: true

# I have use symbolic link to make parquet file available at current location
ls -l
```

```{r}
#| eval: true

patient_id <- 10013310

# Read patients.csv.gz, and extract the info for title
patients_info <- read_csv("~/mimic/hosp/patients.csv.gz",
                          show_col_types = F) |>
  filter(subject_id == patient_id) |>
  select(subject_id, gender, anchor_age)

# Read diagnoses_icd.csv.gz, and extract the info for subtitle
patients_diagnose <- read_csv("~/mimic/hosp/diagnoses_icd.csv.gz",
                              show_col_types = F) |>
  filter(subject_id == patient_id & seq_num <= 3)

# Read d_icd_diagnoses.csv.gz to get the name of diagnoses
diagnoses <- read_csv("~/mimic/hosp/d_icd_diagnoses.csv.gz",
                      show_col_types = F)

# Match the diagnose to the coding in patients_diagnose
patients_diagnose <- left_join(patients_diagnose, diagnoses,
                               by = c("icd_code", "icd_version"))
rm(diagnoses)

# Read procedures_icd.csv.gz, and extract the info for procedure
patients_procedure <- read_csv("~/mimic/hosp/procedures_icd.csv.gz",
                               show_col_types = F) |>
  filter(subject_id == patient_id) |>
  mutate(chartdate = as.POSIXct(chartdate))

# Read d_icd_procedures.csv.gz to get the name of procedures
procedure <- read_csv("~/mimic/hosp/d_icd_procedures.csv.gz",
                      show_col_types = F)

# Match the procedure to the coding in patients_procedure
patients_procedure <- left_join(patients_procedure, procedure,
                                by = c("icd_code", "icd_version")) |>
  mutate(Procedure = str_extract(long_title, "[^,]+"))
  

rm(procedure)

# Read admissions.csv.gz, and extract info for title(race)
patients_info$race <- read_csv("~/mimic/hosp/admissions.csv.gz",
                               show_col_types = F) |>
  filter(subject_id == patient_id) |>
  select("race") |>
  distinct() %>% .$race

# Read transfers.csv.gz, and extract info for ADT
# Notice we need ICU/CCU, which can be detected from careunit
patients_adt <- read_csv("~/mimic/hosp/transfers.csv.gz",
                         show_col_types = F) |>
  filter(subject_id == patient_id & eventtype != "discharge") |>
  select(-"transfer_id") |>
  arrange(intime) |>
  mutate(ICU_CCU = str_detect(careunit, 'CU'))


# Read labevents_pq, and extract info for Lab
patients_lab <- arrow::open_dataset("./labevents_pq", format = 'parquet') |>
  filter(subject_id == patient_id) |>
  select(charttime) |>
  collect() |>
  distinct()

# This is the function to get the title line
generate_title <- function(info){
  subject_id <- str_c("Patient ", as.character(info[1,"subject_id"]))
  gender <- as.character(info[1, "gender"])
  age <- str_c(as.character(info[1, "anchor_age"]), " years old")
  return(str_c(subject_id, gender, age, str_to_lower(info[1, "race"]),
               sep = ", "))
}

# We want to show the diagnoses when the patient was firstly admitted
arrange_hadm_id <- arrange(patients_adt, intime) %>% .$hadm_id
patients_diagnose <- filter(patients_diagnose, hadm_id == arrange_hadm_id[1])

title <- generate_title(patients_info)

subtitle <- str_c(patients_diagnose[1, "long_title"],
                  patients_diagnose[2, "long_title"],
                  patients_diagnose[3, "long_title"], sep = "\n")

number_of_procedure <- patients_procedure |>
  select(Procedure) |>
  distinct() |>
  nrow()
  
```

```{r}
#| eval: true

# Draw the plot with the information above

time_range <- c(patients_adt[[1, "intime"]],
                patients_adt[[nrow(patients_adt), "outtime"]])

empty_data <- tibble(CalenderTime = c(time_range, NA),
                     Information = c("ADT", "Lab", "Procedure"))

empty_data$Information <- factor(empty_data$Information,
                                 levels = c("Procedure", "Lab", "ADT"))

ggplot(empty_data, mapping = aes(x = CalenderTime, y = Information)) +
  geom_blank() +
  geom_point(data = patients_lab, mapping = aes(x = charttime, y = "Lab"),
             shape = 3, size = 2) +
  geom_point(data = patients_procedure,
             mapping = aes(x = chartdate,
                           y = "Procedure",
                           shape = Procedure),
             size = 3) +
  geom_segment(data = patients_adt, aes(x = intime, xend = outtime,
                                        y = "ADT", yend = "ADT",
                                        color = careunit,
                                        linewidth = ICU_CCU)) +
  theme_bw() +
  theme(legend.position="bottom", legend.box = "vertical",
        text = element_text(size = 8)) +
  guides(shape = guide_legend(ncol = 2, order = 1),
         color = guide_legend(ncol = 2, order = 2),
         linewidth = FALSE) +
  labs(title = title,
       subtitle = subtitle,
       color = "Care Unit",
       x = "Calendar Time", y = "") +
   scale_shape_manual(values = c(1:number_of_procedure))
```
Notice that, this patient has been admitted to the hospital three times, and each hospitalization has different diagnoses. Thus, we choose the top 3 diagnoses of the first hospitalization. Since the name of those procedures are too long, I use a shortened version. In addition, there are 9 kinds of procedures in this patients, so it is not a good idea to put all the procedures on the plot, since is it hard to differentiate the legend. The better idea is to select the most important ones according to some medical knowledge. However, for this plot, I just simply put everything on it.


### Q1.2 ICU stays

ICU stays are a subset of ADT history. This figure shows the vitals of the patient `10001217` during ICU stays. The x-axis is the calendar time, and the y-axis is the value of the vital. The color of the line represents the type of vital. The facet grid shows the abbreviation of the vital and the stay ID.

![](10001217_icu.png)

Do a similar visualization for the patient `10013310`.

```{bash}
#| eval: false

# Extract the required columns and rows from chartevents.csv.gz
zcat < ~/mimic/icu/chartevents.csv.gz | \
awk -F, 'BEGIN{OFS = ","} {
  if ($7 == 220045 || $7 == 220180 || $7 == 220179 ||
      $7 == 223761 || $7 == 220210)
  {
    print $0
  }
}' | gzip > chartevents_filtered.csv.gz
```

```{r}
#| eval: true

rm(list = ls())

patient_id <- 10013310

# Read icustays.csv.gz and get the info for this patient
icu_stay <- read_csv("~/mimic/icu/icustays.csv.gz",
                     show_col_types = F) |>
  filter(subject_id == patient_id) |>
  arrange(intime)

# Read d_items.csv.gz to get the code for HR, NBPd, NBPs, RR, Temperature F
items <- read_csv("~/mimic/icu/d_items.csv.gz",
                  show_col_types = F) |>
  filter(abbreviation %in% c("HR", "NBPd", "NBPs", "RR", "Temperature F")) |>
  select(itemid, label, abbreviation)

# Read chartevents.csv.gz and get vitals for this patient
vital <- read_csv("./chartevents_filtered.csv.gz",
                  col_names = c('subject_id', 'hadm_id',
                                'stay_id', 'caregiver_id',
                                'charttime', 'storetime',
                                'itemid', 'value',
                                'valuenum', 'valueuom', 'warning'),
                  show_col_types = F) |>
  filter(subject_id == patient_id) |>
  left_join(items, by = "itemid") |>
  group_by(stay_id)

```

```{r}
#| eval: true

title <- str_c("Patient", as.character(patient_id), "ICU stays - Vitals",
               sep = " ")

ggplot(data = vital) +
  geom_line(mapping = aes(x = charttime, y = valuenum, color = abbreviation),
            show.legend = FALSE) +
  geom_point(mapping = aes(x = charttime, y = valuenum,
                           color = abbreviation), size = 1,
             show.legend = FALSE) +
  facet_grid(abbreviation ~ stay_id, scales = "free") +
  theme_light() +
  labs(title = title, x = "", y = "") +
    scale_x_datetime(date_labels = "%b %d %H:%M") +
  guides(x = guide_axis(n.dodge = 2))
```

## Q2. ICU stays

`icustays.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/icustays/>) contains data about Intensive Care Units (ICU) stays. The first 10 lines are

```{bash}
#| eval: true
zcat < ~/mimic/icu/icustays.csv.gz | head
```

### Q2.1 Ingestion

Import `icustays.csv.gz` as a tibble `icustays_tble`.

```{r}
#| eval: true

rm(list = ls())

icustays_tble <- read_csv("~/mimic/icu/icustays.csv.gz",
                          show_col_types = FALSE)

head(icustays_tble, width = Inf)
```

### Q2.2 Summary and visualization

How many unique `subject_id`? Can a `subject_id` have multiple ICU stays? Summarize the number of ICU stays per `subject_id` by graphs.

```{r}
#| eval: true

# Count how many unique subject_id
icustays_tble |>
  count(subject_id) |>
  nrow()
```

```{r}
#| eval: true

icustays_tble |>
  count(subject_id) |>
  ggplot(aes(x = n)) +
  geom_bar() +
  labs(x = "Number of ICU stays", y = "Number of patients")
```

**Answer: **
There are 50920 unique `subject_id`. A `subject_id` can have multiple ICU stays. The graph shows that most of the patients have only one ICU stay. However, there are some patients who have more than one ICU stay. There are even several patients who have more than 10 ICU stays.

## Q3. `admissions` data

Information of the patients admitted into hospital is available in `admissions.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/hosp/admissions/> for details of each field in this file. The first 10 lines are

```{bash}
#| eval: true

zcat < ~/mimic/hosp/admissions.csv.gz | head
```

### Q3.1 Ingestion

Import `admissions.csv.gz` as a tibble `admissions_tble`.

```{r}
#| eval: true

admission_tble <- read_csv("~/mimic/hosp/admissions.csv.gz",
                           show_col_types = FALSE)

head(admission_tble, width = Inf)
```

### Q3.2 Summary and visualization

Summarize the following information by graphics and explain any patterns you see.

-   number of admissions per patient\
-   admission hour (anything unusual?)\
-   admission minute (anything unusual?)\
-   length of hospital stay (from admission to discharge) (anything unusual?)

According to the [MIMIC-IV documentation](https://mimic.mit.edu/docs/iv/about/concepts/#date-shifting),

> All dates in the database have been shifted to protect patient confidentiality. Dates will be internally consistent for the same patient, but randomly distributed in the future. Dates of birth which occur in the present time are not true dates of birth. Furthermore, dates of birth which occur before the year 1900 occur if the patient is older than 89. In these cases, the patient’s age at their first admission has been fixed to 300.

**Answer: **

```{r}
#| eval: true

admission_tble |>
  count(subject_id) |>
  ggplot(aes(x = n)) +
  geom_bar() +
  labs(x = "Number of admissions", y = "Number of patients")
```
According to the graph, many of the patients have only one admission. However, there are some patients who have more than one admission. The number of patients with more than one admission decreases as the number of admissions increases. There are even several patients who have more than 50 admissions. Therefore, we need to pay attention to those outliers.

```{r}
#| eval: true

admission_tble |>
  ggplot(aes(x = hour(admittime))) +
  geom_bar() +
  labs(x = "Admission hour", y = "Number of admissions")
```

According to the graph, the number of admissions is relatively low from 1 a.m. to 1 p.m.. It increases from 9 a.m. and decreases from 6 p.m.. The number of admissions has a relatively stable trend except 12 a.m. and 7 a.m., which have higher admissions. I guess the reasons for these two outliers are different. At the midnight there might be some emergency cases, and at 7 a.m. it might be the end of a shift, (The hospital may tend to admit new patients until a new shift starts).

```{r}
#| eval: true

admission_tble |>
  ggplot(aes(x = minute(admittime))) +
  geom_bar() +
  labs(x = "Admission minute", y = "Number of admissions")
```
The number of admissions is similar for each minute. However, on the 0th, 15th, 30th, and 45th minute, the number of admissions is slightly higher than the other minutes. I guess the reason is that the hospital may tend to admit new patients at these times.

```{r}
#| eval: true

admission_tble |>
  mutate(los = as.numeric(difftime(dischtime, admittime, units = "days"))) |>
  ggplot(aes(x = los)) +
  geom_histogram(binwidth = 5) +
  labs(x = "Length of hospital stay", y = "Number of admissions")
```
According to the graph, most of the patients stay in the hospital for less than 10 days. There are some patients who stay in the hospital for more than 20 days. There are even several patients who stay in the hospital for more than 100 days. Therefore, we need to pay attention to those outliers.


## Q4. `patients` data

Patient information is available in `patients.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/hosp/patients/> for details of each field in this file. The first 10 lines are

```{bash}
#| eval: true
zcat < ~/mimic/hosp/patients.csv.gz | head
```

### Q4.1 Ingestion

Import `patients.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/patients/>) as a tibble `patients_tble`.

```{r}
#| eval: true

patients_tble <- read_csv("~/mimic/hosp/patients.csv.gz",
                          show_col_types = FALSE)
head(patients_tble, width = Inf)
```

### Q4.2 Summary and visualization

Summarize variables `gender` and `anchor_age` by graphics, and explain any patterns you see.

**Answer: **

```{r}
#| eval: true

# Use violin plot to show the distribution
patients_tble |>
  ggplot(aes(x = factor(gender), y = anchor_age, fill = gender)) +
  geom_violin(trim = FALSE) +
  scale_fill_manual(values = c("pink","lightblue")) +
  facet_grid(. ~ gender, scales = "free_x")
```
```{r}
#| eval: true

patients_tble |>
  ggplot() +
  geom_bar(aes(x = gender))
```
```{r}
#| eval: true

patients_tble |>
  ggplot() +
  geom_histogram(aes(x = anchor_age), binwidth = 5)
```
Notice that there are more female patients than male patients. The age of the patients has two peaks, one is around 60 years old, and the other is around 20 years old. According to the violin graph, the distribution of age is similar for male and female patients.

## Q5. Lab results

`labevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/labevents/>) contains all laboratory measurements for patients. The first 10 lines are

```{bash}
#| eval: true
zcat < ~/mimic/hosp/labevents.csv.gz | head
```

`d_labitems.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/d_labitems/>) is the dictionary of lab measurements.

```{bash}
#| eval: true
zcat < ~/mimic/hosp/d_labitems.csv.gz | head
```

We are interested in the lab measurements of creatinine (50912), potassium (50971), sodium (50983), chloride (50902), bicarbonate (50882), hematocrit (51221), white blood cell count (51301), and glucose (50931). Retrieve a subset of `labevents.csv.gz` that only containing these items for the patients in `icustays_tble`. Further restrict to the last available measurement (by `storetime`) before the ICU stay. The final `labevents_tble` should have one row per ICU stay and columns for each lab measurement.

![](labevents_tble.png)

Hint: Use the Parquet format you generated in Homework 2. For reproducibility, make `labevents_pq` folder available at the current working directory `hw3`, for example, by a symbolic link.

```{r}
#| eval: true

icu_id <- icustays_tble |>
  select(subject_id) |>
  distinct()

labevents_tble <- arrow::open_dataset("labevents_pq", format = 'parquet') |>
  select(subject_id, itemid, storetime, valuenum) |>
  filter(itemid %in% c(50912, 50971, 50983, 50902,
                       50882, 51221, 51301, 50931)) |>
  filter(subject_id %in% icu_id$subject_id) |>
  collect() |>
  left_join(icustays_tble[,c("subject_id", "stay_id", "intime")],
            by = "subject_id") |>
  filter(storetime < intime) |>
  group_by(stay_id, itemid) |>
  slice_max(order_by = storetime, n = 1, with_ties = FALSE) |>
  ungroup() |>
  select(-c(storetime, intime)) |>
  pivot_wider(names_from = itemid, values_from = valuenum) |>
  arrange(subject_id) |>
  rename(creatinine = `50912`, potassium = `50971`, sodium = `50983`,
         chloride = `50902`, bicarbonate = `50882`, hematocrit = `51221`,
         wbc = `51301`, glucose = `50931`) |>
  select(subject_id, stay_id, bicarbonate, chloride, creatinine,
         glucose, potassium, sodium, hematocrit, wbc)
  
head(labevents_tble, width = Inf)
```

Notice that For patient 10171405, stay_id 30517917, the patient's lab result has two different result at the same storetime. So I include the first result in the final table.

## Q6. Vitals from charted events

`chartevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/chartevents/>) contains all the charted data available for a patient. During their ICU stay, the primary repository of a patient’s information is their electronic chart. The `itemid` variable indicates a single measurement type in the database. The `value` variable is the value measured for `itemid`. The first 10 lines of `chartevents.csv.gz` are

```{bash}
#| eval: true

zcat < ~/mimic/icu/chartevents.csv.gz | head
```

`d_items.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/d_items/>) is the dictionary for the `itemid` in `chartevents.csv.gz`.

```{bash}
#| eval: true

zcat < ~/mimic/icu/d_items.csv.gz | head
```

We are interested in the vitals for ICU patients: heart rate (220045), systolic non-invasive blood pressure (220179), diastolic non-invasive blood pressure (220180), body temperature in Fahrenheit (223761), and respiratory rate (220210). Retrieve a subset of `chartevents.csv.gz` only containing these items for the patients in `icustays_tble`. Further restrict to the first vital measurement within the ICU stay. The final `chartevents_tble` should have one row per ICU stay and columns for each vital measurement.

![](chartevents_tble.png)

Hint: Use the Parquet format you generated in Homework 2. For reproducibility, make `chartevents_pq` folder available at the current working directory, for example, by a symbolic link.

**Answer: **

```{bash}
#| eval: false

# Don't run this code, it takes too much  time and space
# Decompress the chartevents.csv.gz in order to turn it into parquet format
zcat < ~/mimic/icu/chartevents.csv.gz > chartevents.csv
```

```{r}
#| eval: false

# Don't run this code, it takes too much  time and space

# Read the chartevents.csv, and turn it into parquet format
lab_arrow <- arrow::open_dataset("chartevents.csv", format = 'csv')
arrow::write_dataset(lab_arrow, "chartevents_pq", format = c('parquet'))
```

```{r}
#| eval: true

rm(icu_id)

chartevents_tble <- arrow::open_dataset("chartevents_pq", format = 'parquet') |>
  select(subject_id, itemid, charttime, valuenum) |>
  filter(itemid %in% c(220045, 220179, 220180, 223761, 220210)) |>
  collect() |>
  left_join(icustays_tble[,c("subject_id", "stay_id", "intime", "outtime")],
            by = "subject_id") |>
  filter(charttime >= intime & charttime <= outtime) |>
  group_by(stay_id, itemid) |>
  slice_min(order_by = charttime, n = 1, with_ties = FALSE) |>
  ungroup() |>
  select(-c(charttime, intime)) |>
  pivot_wider(names_from = itemid, values_from = valuenum) |>
  arrange(subject_id) |>
  rename(heartrate = `220045`, nbps = `220179`, nbpd = `220180`,
         temperature = `223761`, rr = `220210`) |>
  select(subject_id, stay_id, heartrate, nbps, nbpd, rr, temperature)

head(chartevents_tble, width = Inf)
```

## Q7. Putting things together

Let us create a tibble `mimic_icu_cohort` for all ICU stays, where rows are all ICU stays of adults (age at `intime` \>= 18) and columns contain at least following variables

-   all variables in `icustays_tble`\
-   all variables in `admissions_tble`\
-   all variables in `patients_tble`
-   the last lab measurements before the ICU stay in `labevents_tble`
-   the first vital measurements during the ICU stay in `chartevents_tble`

The final `mimic_icu_cohort` should have one row per ICU stay and columns for each variable.

![](mimic_icu_cohort.png)
**Answer: **

```{r}
#| eval: true

mimic_icu_cohort <- left_join(icustays_tble, admission_tble,
                              by = c("subject_id", "hadm_id")) |>
  left_join(patients_tble, by = "subject_id") |>
  filter((anchor_age + as.numeric(year(intime)) - anchor_year) >= 18) |>
  left_join(labevents_tble, by = c("subject_id", "stay_id")) |>
  left_join(chartevents_tble, by = c("subject_id", "stay_id")) |>
  mutate(age_intime = anchor_age + as.numeric(year(intime)) - anchor_year)

head(mimic_icu_cohort, width = Inf)
```


## Q8. Exploratory data analysis (EDA)

Summarize the following information about the ICU stay cohort `mimic_icu_cohort` using appropriate numerics or graphs:

-   Length of ICU stay `los` vs demographic variables (race, insurance, marital_status, gender, age at intime)

-   Length of ICU stay `los` vs the last available lab measurements before ICU stay

-   Length of ICU stay `los` vs the average vital measurements within the first hour of ICU stay

-   Length of ICU stay `los` vs first ICU unit

**Answer: **

```{r}
#| eval: true

# Length of ICU stay `los` vs demographic variables
# (race, insurance, marital_status, gender, age at intime)

race_los <- mimic_icu_cohort |>
  select(los, race) |>
  group_by(race) |>
  summarize(mean_los = mean(los, na.rm = TRUE), std_los = sd(los, na.rm = TRUE),
            q25_los = quantile(los, 0.25, na.rm = TRUE),
            q50_los = median(los, na.rm = TRUE),
            q75_los = quantile(los, 0.75, na.rm = TRUE))

race_los

race_los |>
  ggplot(aes(x = mean_los, y = reorder(race, mean_los))) +
  geom_point(size = 2) +
  theme_bw() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        panel.grid.major.y = element_line(color = "grey80",
                                          linetype = "dashed")) +
  labs(x = "Mean length of ICU stay", y ="")
```
```{r}
#| eval: true

# Length of ICU stay `los` vs insurance

ggplot(mimic_icu_cohort, aes(x = los, fill = insurance)) +
  geom_density(alpha = 0.5) +
  labs(x = "LOS", y = "Density", title = "Distribution of LOS by Insurance") +
  scale_fill_discrete(name = "Insurance") +
  facet_wrap(~ insurance, ncol = 1)

```
```{r}
#| eval: true

# Length of ICU stay `los` vs insurance

ggplot(mimic_icu_cohort, aes(x = los, fill = marital_status)) +
  geom_density(alpha = 0.5) +
  labs(x = "LOS", y = "Density", title = "Distribution of LOS by Marital_status") +
  scale_fill_discrete(name = "Marital_status") +
  facet_wrap(~ marital_status, ncol = 1)

```

```{r}
#| eval: true

# Length of ICU stay `los` vs gender

ggplot(mimic_icu_cohort, aes(x = los, fill = gender)) +
  geom_density(alpha = 0.5) +
  labs(x = "LOS", y = "Density", title = "Distribution of LOS by Gender") +
  scale_fill_discrete(name = "Marital_status") +
  facet_wrap(~ gender, ncol = 1)
```


```{r}
#| eval: true

# Length of ICU stay vs age at intime
ggplot(mimic_icu_cohort, aes(x = age_intime, y = los)) +
  geom_point(alpha = 0.05) +
  labs(x = "Age at intime", y = "LOS")
```

```{r}
#| eval: true
  
# Length of ICU stay vs the last available lab measurements before ICU stay

plot_1 <- ggplot(mimic_icu_cohort, aes(x = creatinine, y = los)) +
  geom_point(alpha = 0.05) +
  labs(x = "Creatinine", y = "LOS")

plot_2 <- ggplot(mimic_icu_cohort, aes(x = potassium, y = los)) +
  geom_point(alpha = 0.05) +
  labs(x = "Potassium", y = "LOS")

plot_3 <- ggplot(mimic_icu_cohort, aes(x = sodium, y = los)) +
  geom_point(alpha = 0.05) +
  labs(x = "Sodium", y = "LOS")

plot_4 <- ggplot(mimic_icu_cohort, aes(x = chloride, y = los)) +
  geom_point(alpha = 0.05) +
  labs(x = "Chloride", y = "LOS")

plot_5 <- ggplot(mimic_icu_cohort, aes(x = bicarbonate, y = los)) +
  geom_point(alpha = 0.05) +
  labs(x = "Bicarbonate", y = "LOS")

plot_6 <- ggplot(mimic_icu_cohort, aes(x = hematocrit, y = los)) +
  geom_point(alpha = 0.05) +
  labs(x = "Hematocrit", y = "LOS")

plot_7 <- ggplot(mimic_icu_cohort, aes(x = wbc, y = los)) +
  geom_point(alpha = 0.05) +
  labs(x = "WBC", y = "LOS")

plot_8 <- ggplot(mimic_icu_cohort, aes(x = glucose, y = los)) +
  geom_point(alpha = 0.05) +
  labs(x = "Glucose", y = "LOS")

gridExtra::grid.arrange(plot_1, plot_2, plot_3, plot_4,
                        plot_5, plot_6, plot_7, plot_8, ncol = 2)

```

```{r}
#| eval: true

# Length of ICU stay vs first vital measurement within the ICU stay

plot_1 <- ggplot(mimic_icu_cohort, aes(x = heartrate, y = los)) +
  geom_point(alpha = 0.05) +
  labs(x = "Heartrate", y = "LOS")

plot_2 <- ggplot(mimic_icu_cohort, aes(x = nbps, y = los)) +
  geom_point(alpha = 0.05) +
  labs(x = "NBPS", y = "LOS")

plot_3 <- ggplot(mimic_icu_cohort, aes(x = nbpd, y = los)) +
  geom_point(alpha = 0.05) +
  labs(x = "NBPD", y = "LOS")

plot_4 <- ggplot(mimic_icu_cohort, aes(x = temperature, y = los)) +
  geom_point(alpha = 0.05) +
  labs(x = "Temperature", y = "LOS")

plot_5 <- ggplot(mimic_icu_cohort, aes(x = rr, y = los)) +
  geom_point(alpha = 0.05) +
  labs(x = "RR", y = "LOS")

gridExtra::grid.arrange(plot_1, plot_2, plot_3, plot_4, plot_5, ncol = 2)
```

```{r}
#| eval: true

# Length of ICU stay vs first ICU unit

unit_los <- mimic_icu_cohort |>
  select(los, first_careunit) |>
  group_by(first_careunit) |>
  summarize(mean_los = mean(los, na.rm = TRUE), std_los = sd(los, na.rm = TRUE),
            q25_los = quantile(los, 0.25, na.rm = TRUE),
            q50_los = median(los, na.rm = TRUE),
            q75_los = quantile(los, 0.75, na.rm = TRUE))

unit_los

unit_los |>
  ggplot(aes(x = mean_los, y = reorder(first_careunit, mean_los))) +
  geom_point(size = 2) +
  theme_bw() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        panel.grid.major.y = element_line(color = "grey80",
                                          linetype = "dashed")) +
  labs(x = "first ICU Unit", y ="")
```
